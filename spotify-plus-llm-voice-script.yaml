blueprint:
  name: Voice - SpotifyPlus - Full LLM script
  source_url: https://github.com/Charghoul/spotify-plus-llm-voice-assist/blob/main/spotify-plus-llm-voice-script.yaml
  description: '
    `v0.0.16`
    
    # Creates a script which will allow voice requests for SpotifyPlus

    * No changes are required for any of the settings below for this script to work,
    but your specific LLM integration may need some fine-tuning. To do that, adjust
    the prompts sent to the LLM.

    * **Make sure to expose the script to Assist after creating it.**

    * **Make sure to give the script a clear description.** An example can be found
    below.

    * It is possible to add additional actions to be performed after the SpotifyPlus
    play media action. There are several variables available which are described below.


    ## Example for script description

    `This script is used to play music from Spotify based on a voice request. The tool takes the
    following arguments: media_type, artist, track, media_id, shuffle, source_name. media_id,
    media_type are always required and must always be supplied as arguments to this
    tool. A source or area can optionally be provided in the voice request as well. 
    Use the parameters as described in the description of each parameter. 
    Use this tool whenever the user requests to play music from Spotify.`

    ## Available variables for additional actions

    |Variable|Description|

    |---|---|

    |`media_id`|The general description of the media, can be a song name, radio station,
    album name, etc. For Spotify URIs or IDs, this will be the full URI/ID.|

    |`media_type`|Will be one of the following: `"track"`, `"artist"`, `"album"`,
    `"playlist"`, `"podcast"`, `"radio"`|

    |`artist`|The artist requested in the voice command. Will be empty in case the
    artist is not relevant or when there are multiple artists requested|

    |`track`|The track/song requested in the voice command, will be empty in case the track
    is not relevant or when multiple tracks are requested|

    |`media_description`|The description used in the voice request to describe the
    media. For example if the voice request was "Play the best songs from Queen in
    the living room" the value for this variable will be "the best songs from Queen"

    |`area`|The area(s) determined by the LLM in which the request will be played.
    The variable will undefined in case there was no area information, in case it
    is defined it will be a list of area_ids|

    |`source_name`|The Spotify Connect source name determined by the LLM on which
    the request will be played. The variable will be undefined if there was no source
    provided in the request.|

    |`default_entity`|The default SpotifyPlus entity provided when setting up the script or `none`
    if no entity is provided.|

    |`shuffle`|Whether or not to turn on the shuffle setting on the player that handles the request.
    It will be set based on whether or not the request mentions wanting to shuffle the music.
    The value will either be true or false.|'
  domain: script
  author: Jan Eisenbarth
  homeassistant:
    min_version: 2024.6.0
  input:
    spotify_plus_settings:
      name: Settings for SpotifyPlus playback
      icon: mdi:spotify
      description: You can use these settings to configure how SpotifyPlus playback
        is handled.
      input:
        default_entity:
          name: Default SpotifyPlus Entity
          description: 'The SpotifyPlus media player entity that will be used for all playback.
            This is required since the thlucas1 SpotifyPlus integration uses a single entity
            with multiple sources rather than multiple entities.'
          selector:
            entity:
              filter:
                domain:
                - media_player
                integration: spotifyplus
              multiple: false
          default:
        default_device:
          name: Default Source
          description: 'Default Spotify Connect source to use if none specified in the request. This can be any device you have connected to Spotify - a speaker, phone, computer, etc. Enter "none" to always use the current active device if available.'
          selector:
            text:
          default:
        force_device_activation:
          name: Force Device Activation
          description: 'Force the device to reconnect to Spotify Connect before transferring playback.
            This is useful if devices sometimes appear as available but actually need to be re-activated.'
          selector:
            boolean:
          default: true
        device_transfer_delay:
          name: Device Transfer Delay
          description: 'Time delay (in seconds) to wait after transferring playback to a device.
            This gives Spotify time to process the change before attempting to play media.'
          selector:
            number:
              min: 0
              max: 10
              step: 0.1
              mode: slider
              unit_of_measurement: seconds
          default: 1
        search_limit:
          name: Search Limit
          description: 'The maximum number of search results to return when searching
            for tracks, artists, albums, playlists or shows.'
          selector:
            number:
              min: 1
              max: 50
              mode: slider
              step: 1
          default: 5
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description: You can use these settings to fine-tune the prompts for your specific
        LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        media_type_prompt:
          name: Media Type Prompt
          description: The prompt that the LLM will use to provide the media_type.
          selector:
            text:
              multiline: true
              multiple: false
          default: 'This argument is mandatory and must always be provided no matter
            what!

            "media_type" can only be one of 6 different values:

            - "track" if the search is about a specific track or a list of tracks.

            - "album" if the search is about an album or a list of albums.

            - "artist" if the search is about an artist.

            - "playlist" if the search specifically requests a playlist.

            - "podcast" if the search is about a podcast or show.

            - "radio" if the search is a radio channel or artist radio.

            media_type is mandatory and must always be provided. If a request does
            not match any of these types, for example when music from a specific genre
            is requested, then use "track" and provide a list of matching songs for
            the "media_id" parameter.'
        artist_prompt:
          name: Artist Prompt
          description: The prompt that the LLM will use to provide the artist.
          selector:
            text:
              multiline: true
              multiple: false
          default: '"artist" is the artist the user requests to play, or the artist
            of a specific track if the user mentions it while requesting to play a
            specific song. 
            
            For example, if the request is "Play Bohemian Rhapsody by Queen", the artist would be "Queen".
            
            If the artist is unknown or there are multiple artists requested, 
            use an empty string.'
        track_prompt:
          name: Track Prompt
          description: The prompt that the LLM will use to provide the track.
          selector:
            text:
              multiline: true
              multiple: false
          default: '"track" is the specific song or track the user wants to play.
            If the user requests a specific song, provide the song title here.
            
            For example, if the request is "Play Bohemian Rhapsody by Queen", the track would be "Bohemian Rhapsody".
            
            If the track is unknown or there are multiple tracks requested, 
            use an empty string.'
        media_id_prompt:
          name: Media ID Prompt
          description: The prompt that the LLM will use to provide the media_id.
          selector:
            text:
              multiline: true
              multiple: false
          default: 'This argument is mandatory and must always be provided no matter
            what!

            media_id is a descriptive search term that will be used to find the content in Spotify.
            
            - If media_type is "track": Then media_id should be the track name or a list of track names. 
              If there are multiple artists in the result, include both the artist name and song name 
              (example: "Artist name - Song name"). If all songs are from the same artist, use the 
              artist parameter separately, and only provide song names in media_id.

            - If media_type is "album": Then media_id should be the album name.

            - If media_type is "artist": Then media_id should be the artist name.

            - If media_type is "playlist": Then media_id should be the playlist name.

            - If media_type is "podcast": Then media_id should be the podcast/show name.

            - If media_type is "radio": Then media_id should be the artist name followed by "Radio".

            This is a mandatory argument and must always be provided. The system will search Spotify 
            for the closest match to what you provide here.'
        media_description_prompt:
          name: Media Description Prompt
          description: The prompt that the LLM will use to provide the media description.
          selector:
            text:
              multiline: true
              multiple: false
          default: The "media_description" key is used to describe the media which
            will be played. This can be taken from the voice command query, but it
            should be only the part which is relevant for the media. So if the voice
            request is "Play the best Queen songs on the living room player" the value
            for "media_description" should be "the best Queen songs"
        area_prompt:
          name: Area Prompt
          description: The prompt that the LLM will use to provide the area.
          selector:
            text:
              multiline: true
              multiple: false
          default: 'The area or areas for which the music is requested. If the request
            does not mention a target (either an area or a source), use the area the
            request comes from.

            If the area can not be determined from the request, or the source the
            request comes from, do not use this parameter.

            Only use both the "area" parameter and the "source_name" parameter together
            if both are specifically used in the request.'
        source_name_prompt:
          name: Source Name Prompt
          description: >-
            The description that will be used in the message to either skip or
            suggest a source that is different from the default one.
          default: >-
            You can specify a source for playback by saying "on the [source name]".
            For example, "Play Queen on the living room" or "Play relaxing music in the bedroom".
            Available sources are the ones listed in your SpotifyPlus media player's source_list.
        shuffle_prompt:
          name: Shuffle Prompt
          description: The prompt that the LLM will use to determine whether to turn on shuffle or not.
          selector:
            text:
              multiline: true
              multiple: false
          default: 'This argument is mandatory and must always be provided no matter
            what!
            
            If the request mentions shuffling the music, then the "shuffle" is set to true. 
            Otherwise, "shuffle" is set to false.
            
            For example, if the request is "Shuffle music by Muse", then "shuffle" should be set to true.
            
            If the request is "Play music by Billy Talent", "shuffle" would be false 
            since the request did not mention or request to shuffle.

            If the request is "Shuffle the playlist Liked Songs", then "shuffle" should be set to true.

            If the request is "Play the artist Guns and Roses", "shuffle" should be set to false, since the request 
            does not mention or request to shuffle.
            '
    addition_conditions_actions:
      name: Additional actions
      icon: mdi:wrench
      description: You can add additional actions to be performed after the Spotify play
        media action is started. Variables which can always be used
        are media_id, media_type, track, artist. Based on the request, the variables
        area and source_name can also be available.
      collapsed: true
      input:
        actions:
          name: Additional actions
          selector:
            action: {}
          default: []
mode: parallel
max_exceeded: silent
description: This script is used to play music from Spotify based on a voice request. You only need to provide 
  descriptive information like artist names, song titles, or playlist names - the script will handle searching 
  for the best match in Spotify. The media_type and media_id parameters are required. You can optionally 
  specify a source (Spotify Connect device) or area.
fields:
  media_type:
    selector:
      select:
        options:
        - track
        - album
        - artist
        - playlist
        - podcast
        - radio
    name: Media Type
    description: !input media_type_prompt
    required: true
  artist:
    selector:
      text:
    name: Artist
    description: !input artist_prompt
    required: true
  track:
    selector:
      text:
    name: Track
    description: !input track_prompt
    required: true
  media_id:
    selector:
      text:
    name: Media ID
    description: !input media_id_prompt
    required: true
  media_description:
    selector:
      text:
    name: Media Description
    description: !input media_description_prompt
    required: true
  area:
    selector:
      area:
        multiple: true
    name: Area
    description: !input area_prompt
  source_name:
    selector:
      text:
    name: Source Name
    description: !input source_name_prompt
  shuffle:
    selector:
      boolean:
    name: Shuffle
    description: !input shuffle_prompt
sequence:
- variables:
    version: 20250626
    default_entity: !input default_entity
    default_device: !input default_device
    force_device_activation: !input force_device_activation
    device_transfer_delay: !input device_transfer_delay
    search_limit: !input search_limit
    shuffle: '{{ shuffle }}'
    target_device: '{{ source_name | default(default_device, true) }}'
    invalid_target:
      response: Unable to find valid target
- if:
  - condition: template
    value_template: >-
      {% if not default_entity %}true{% else %}false{% endif %}
  then:
  - stop: No valid SpotifyPlus entity specified for Voice script
    response_variable: invalid_target
# Get available source list from the SpotifyPlus entity
- variables:
    source_list: '{{ state_attr(default_entity, "source_list") | default([]) }}'
    media_id_safe: '{{ media_id | default("") }}'
    artist_safe: '{{ artist | default("") }}'
    track_safe: '{{ track | default("") }}'
    # LLM will always provide names, never URIs
    search_term_track: '{{ (artist_safe + " " if artist_safe else "") + (track_safe if track_safe else media_id_safe) }}'
    search_term_artist: '{{ artist_safe if artist_safe else media_id_safe }}'
    search_term_album: '{{ (artist_safe + " " if artist_safe else "") + media_id_safe }}'
    search_term_playlist: '{{ media_id_safe }}'
    search_term_podcast: '{{ media_id_safe }}'
    search_term_radio: >-
      {% if artist_safe %}
        {{ artist_safe }}
      {% else %}
        {% if ' Radio' in media_id_safe %}
          {{ media_id_safe | replace(" Radio", "") }}
        {% else %}
          {{ media_id_safe }}
        {% endif %}
      {% endif %}
# Get list of available Spotify Connect devices
- alias: Get available Spotify Connect devices
  action: spotifyplus.get_player_devices
  data:
    entity_id: '{{ default_entity }}'
    refresh: true
    sort_result: true
  response_variable: available_devices
- choose:
  # Search for tracks
  - conditions:
    - condition: template
      value_template: >-
        {% if media_type == "track" %}true{% else %}false{% endif %}
    sequence:
    - action: spotifyplus.search_tracks
      data:
        entity_id: '{{ default_entity }}'
        criteria: '{{ search_term_track }}'
        limit: '{{ search_limit }}'
      response_variable: track_search_results
    - variables:
        media_id: >-
          {% if track_search_results.result is defined and track_search_results.result.get('items') is defined and track_search_results.result.get('items')[0] is defined %}
            {% if track_search_results.result.get('items')[0].uri is defined %}
              {{ track_search_results.result.get('items')[0].uri }}
            {% else %}
              {{ track_search_results.result.get('items')[0].id }}
            {% endif %}
          {% else %}
            error
          {% endif %}
        track_id: >-
          {% if track_search_results.result is defined and track_search_results.result.get('items') is defined and track_search_results.result.get('items')[0] is defined %}
            {{ track_search_results.result.get('items')[0].id }}
          {% else %}
            error
          {% endif %}
        media_type_uri: track

  # Search for artists
  - conditions:
    - condition: template
      value_template: >-
        {% if media_type == "artist" %}true{% else %}false{% endif %}
    sequence:
    - action: spotifyplus.search_artists
      data:
        entity_id: '{{ default_entity }}'
        criteria: '{{ search_term_artist }}'
        limit: '{{ search_limit }}'
      response_variable: artist_search_results
    - variables:
        media_id: >-
          {% if artist_search_results.result is defined and artist_search_results.result.get('items') is defined and artist_search_results.result.get('items')[0] is defined %}
            {% if artist_search_results.result.get('items')[0].uri is defined %}
              {{ artist_search_results.result.get('items')[0].uri }}
            {% else %}
              {{ artist_search_results.result.get('items')[0].id }}
            {% endif %}
          {% else %}
            error
          {% endif %}
        artist_id: >-
          {% if artist_search_results.result is defined and artist_search_results.result.get('items') is defined and artist_search_results.result.get('items')[0] is defined %}
            {{ artist_search_results.result.get('items')[0].id }}
          {% else %}
            error
          {% endif %}
        artist_name: >-
          {% if artist_search_results.result is defined and artist_search_results.result.get('items') is defined and artist_search_results.result.get('items')[0] is defined %}
            {{ artist_search_results.result.get('items')[0].name }}
          {% else %}
            Unknown
          {% endif %}
        media_type_uri: artist

  # Search for albums
  - conditions:
    - condition: template
      value_template: >-
        {% if media_type == "album" %}true{% else %}false{% endif %}
    sequence:
    - action: spotifyplus.search_albums
      data:
        entity_id: '{{ default_entity }}'
        criteria: '{{ search_term_album }}'
        limit: '{{ search_limit }}'
      response_variable: album_search_results
    - variables:
        media_id: >-
          {% if album_search_results.result is defined and album_search_results.result.get('items') is defined and album_search_results.result.get('items')[0] is defined %}
            {% if album_search_results.result.get('items')[0].uri is defined %}
              {{ album_search_results.result.get('items')[0].uri }}
            {% else %}
              {{ album_search_results.result.get('items')[0].id }}
            {% endif %}
          {% else %}
            error
          {% endif %}
        album_id: >-
          {% if album_search_results.result is defined and album_search_results.result.get('items') is defined and album_search_results.result.get('items')[0] is defined %}
            {{ album_search_results.result.get('items')[0].id }}
          {% else %}
            error
          {% endif %}
        album_name: >-
          {% if album_search_results.result is defined and album_search_results.result.get('items') is defined and album_search_results.result.get('items')[0] is defined %}
            {{ album_search_results.result.get('items')[0].name }}
          {% else %}
            Unknown
          {% endif %}
        album_artist_name: >-
          {% if album_search_results.result is defined and album_search_results.result.get('items') is defined and album_search_results.result.get('items')[0] is defined and album_search_results.result.get('items')[0].get('artists') is defined and album_search_results.result.get('items')[0].get('artists')[0] is defined %}
            {{ album_search_results.result.get('items')[0].get('artists')[0].name }}
          {% else %}
            Unknown
          {% endif %}
        media_type_uri: album

  # Search for playlists
  - conditions:
    - condition: template
      value_template: >-
        {% if media_type == "playlist" %}true{% else %}false{% endif %}
    sequence:
    - action: spotifyplus.search_playlists
      data:
        entity_id: '{{ default_entity }}'
        criteria: '{{ search_term_playlist }}'
        limit: '{{ search_limit }}'
      response_variable: playlist_search_results
    - variables:
        media_id: >-
          {% if playlist_search_results.result is defined and playlist_search_results.result.get('items') is defined and playlist_search_results.result.get('items')[0] is defined %}
            {% if playlist_search_results.result.get('items')[0].uri is defined %}
              {{ playlist_search_results.result.get('items')[0].uri }}
            {% else %}
              {{ playlist_search_results.result.get('items')[0].id }}
            {% endif %}
          {% else %}
            error
          {% endif %}
        playlist_id: >-
          {% if playlist_search_results.result is defined and playlist_search_results.result.get('items') is defined and playlist_search_results.result.get('items')[0] is defined %}
            {{ playlist_search_results.result.get('items')[0].id }}
          {% else %}
            error
          {% endif %}
        playlist_name: >-
          {% if playlist_search_results.result is defined and playlist_search_results.result.get('items') is defined and playlist_search_results.result.get('items')[0] is defined %}
            {{ playlist_search_results.result.get('items')[0].name }}
          {% else %}
            Unknown
          {% endif %}
        media_type_uri: playlist

  # Search for podcasts
  - conditions:
    - condition: template
      value_template: >-
        {% if media_type == "podcast" %}true{% else %}false{% endif %}
    sequence:
    - action: spotifyplus.search_shows
      data:
        entity_id: '{{ default_entity }}'
        criteria: '{{ search_term_podcast }}'
        limit: '{{ search_limit }}'
      response_variable: podcast_search_results
    - variables:
        media_id: >-
          {% if podcast_search_results.result is defined and podcast_search_results.result.get('items') is defined and podcast_search_results.result.get('items')[0] is defined %}
            {% if podcast_search_results.result.get('items')[0].uri is defined %}
              {{ podcast_search_results.result.get('items')[0].uri }}
            {% else %}
              {{ podcast_search_results.result.get('items')[0].id }}
            {% endif %}
          {% else %}
            error
          {% endif %}
        podcast_id: >-
          {% if podcast_search_results.result is defined and podcast_search_results.result.get('items') is defined and podcast_search_results.result.get('items')[0] is defined %}
            {{ podcast_search_results.result.get('items')[0].id }}
          {% else %}
            error
          {% endif %}
        podcast_name: >-
          {% if podcast_search_results.result is defined and podcast_search_results.result.get('items') is defined and podcast_search_results.result.get('items')[0] is defined %}
            {{ podcast_search_results.result.get('items')[0].name }}
          {% else %}
            Unknown
          {% endif %}
        media_type_uri: show

  # Search for radio
  - conditions:
    - condition: template
      value_template: >-
        {% if media_type == "radio" %}true{% else %}false{% endif %}
    sequence:
    - action: spotifyplus.search_artists
      data:
        entity_id: '{{ default_entity }}'
        criteria: '{{ search_term_radio }}'
        limit: '{{ search_limit }}'
      response_variable: radio_search_results
    - variables:
        media_id: >-
          {% if radio_search_results.result is defined and radio_search_results.result.get('items') is defined and radio_search_results.result.get('items')[0] is defined %}
            {% if radio_search_results.result.get('items')[0].uri is defined %}
              {{ radio_search_results.result.get('items')[0].uri }}
            {% else %}
              {{ radio_search_results.result.get('items')[0].id }}
            {% endif %}
          {% else %}
            error
          {% endif %}
        radio_id: >-
          {% if radio_search_results.result is defined and radio_search_results.result.get('items') is defined and radio_search_results.result.get('items')[0] is defined %}
            {{ radio_search_results.result.get('items')[0].id }}
          {% else %}
            error
          {% endif %}
        radio_name: >-
          {% if radio_search_results.result is defined and radio_search_results.result.get('items') is defined and radio_search_results.result.get('items')[0] is defined %}
            {{ radio_search_results.result.get('items')[0].name }}
          {% else %}
            Unknown
          {% endif %}
        media_type_uri: station

  default:
  - variables:
      media_type_uri: '{{ media_type }}'

# Check if search failed and show appropriate error message
- if:
  - condition: template
    value_template: >-
      {% if media_id == "error" %}true{% else %}false{% endif %}
  then:
  - stop: "Could not find {{ media_type }} for '{{ media_id_safe }}'. Please try a different search term."
    error: true

# Prepare the final media ID/URI format
- variables:
    final_media_id: >-
      {% if media_id and 'spotify:' in media_id %}
        {{ media_id }}
      {% elif media_type == "track" and track_id and track_id != "error" %}
        spotify:track:{{ track_id }}
      {% elif media_type == "artist" and artist_id and artist_id != "error" %}
        spotify:artist:{{ artist_id }}
      {% elif media_type == "album" and album_id and album_id != "error" %}
        spotify:album:{{ album_id }}
      {% elif media_type == "playlist" and playlist_id and playlist_id != "error" %}
        spotify:playlist:{{ playlist_id }}
      {% elif media_type == "podcast" and podcast_id and podcast_id != "error" %}
        spotify:show:{{ podcast_id }}
      {% elif media_type == "radio" and radio_id and radio_id != "error" %}
        spotify:artist:{{ radio_id }}
      {% elif media_id and media_id != "error" %}
        spotify:{{ media_type_uri }}:{{ media_id }}
      {% else %}
        error
      {% endif %}
    final_media_type: '{{ media_type }}'

# Check if media ID construction failed
- if:
  - condition: template
    value_template: >-
      {% if final_media_id == "error" %}true{% else %}false{% endif %}
  then:
  - stop: "Failed to construct a valid Spotify URI for {{ media_type }} '{{ media_id_safe }}'. Please try a different search term."
    error: true

# Determine target source based on the request or defaults
- variables:
    # Check if requested device exists in the available devices
    device_found: >-
      {% if target_device %}
        {% if available_devices and available_devices.devices is defined %}
          {% set device_exists = false %}
          {% for device in available_devices.devices %}
            {% if device.name == target_device %}
              {% set device_exists = true %}
            {% endif %}
          {% endfor %}
          {{ device_exists }}
        {% else %}
          false
        {% endif %}
      {% else %}
        false
      {% endif %}
    # Use target_device if found, otherwise use default device
    playback_device_id: >-
      {% if device_found == true %}
        {{ target_device }}
      {% else %}
        {{ default_device }}
      {% endif %}

# Check if the requested device was not found
- if:
  - condition: template
    value_template: >-
      {% if target_device and target_device != default_device and device_found != true %}true{% else %}false{% endif %}
  then:
  - service: persistent_notification.create
    data:
      title: "Spotify Playback Warning"
      message: >-
        Device "{{ target_device }}" not found in available Spotify Connect devices.
        Using default device instead.

# Play the requested content
- alias: Play requested content
  choose:
  - conditions:
    - condition: template
      value_template: >-
        {% if final_media_type == "track" %}true{% else %}false{% endif %}
    sequence:
    - action: spotifyplus.player_media_play_tracks
      data:
        entity_id: '{{ default_entity }}'
        device_id: '{{ playback_device_id }}'
        uris: '{{ final_media_id }}'
      continue_on_error: false
  # Regular context playback for all other types
  - conditions:
    - condition: template
      value_template: >-
        {% if final_media_type == "playlist" or final_media_type == "album" or final_media_type == "artist" or final_media_type == "show" %}true{% else %}false{% endif %}
    sequence:
    - action: spotifyplus.player_media_play_context
      data:
        entity_id: '{{ default_entity }}'
        device_id: '{{ playback_device_id }}'
        context_uri: '{{ final_media_id }}'
      continue_on_error: false

# Set shuffle mode
- alias: Set shuffle mode
  action: spotifyplus.player_set_shuffle_mode
  data:
    state: '{{ shuffle }}'
    entity_id: '{{ default_entity }}'
    device_id: '{{ playback_device_id }}'
    delay: 1
  continue_on_error: true

# Run any additional actions
- sequence: !input actions 
