blueprint:
  name: Voice - SpotifyPlus - Full LLM script
  source_url: https://github.com/Charghoul/spotify-plus-llm-voice-assist/blob/main/spotify-plus-llm-voice-script.yaml
  description: '
    # Creates a script which will allow voice requests for SpotifyPlus

    * No changes are required for any of the settings below for this script to work,
    but your specific LLM integration may need some fine-tuning. To do that, adjust
    the prompts sent to the LLM.

    * **Make sure to expose the script to Assist after creating it.**

    * **Make sure to give the script a clear description.** An example can be found
    below.

    * It is possible to add additional actions to be performed after the SpotifyPlus
    play media action. There are several variables available which are described below.


    ## Example for script description

    `This script is used to play music from Spotify based on a voice request. The tool takes the
    following arguments: media_type, artist, track, media_id, shuffle, device_name. media_id,
    media_type are always required and must always be supplied as arguments to this
    tool. A device or area can optionally be provided in the voice request as well. 
    Use the parameters as described in the description of each parameter. 
    Use this tool whenever the user requests to play music from Spotify.`

    ## Available variables for additional actions

    |Variable|Description|

    |---|---|

    |`media_id`|The general description of the media, can be a song name, radio station,
    album name, etc. For Spotify URIs or IDs, this will be the full URI/ID.|

    |`media_type`|Will be one of the following: `"track"`, `"artist"`, `"album"`,
    `"playlist"`, `"podcast"`, `"radio"`|

    |`artist`|The artist requested in the voice command. Will be empty in case the
    artist is not relevant or when there are multiple artists requested|

    |`track`|The track/song requested in the voice command, will be empty in case the track
    is not relevant or when multiple tracks are requested|

    |`media_description`|The description used in the voice request to describe the
    media. For example if the voice request was "Play the best songs from Queen in
    the living room" the value for this variable will be "the best songs from Queen"

    |`area`|The area(s) determined by the LLM in which the request will be played.
    The variable will undefined in case there was no area information, in case it
    is defined it will be a list of area_ids|

    |`device_name`|The Spotify Connect device name determined by the LLM on which
    the request will be played. The variable will be undefined if there was no device
    provided in the request.|

    |`default_entity`|The default SpotifyPlus entity provided when setting up the script or `none`
    if no entity is provided.|

    |`default_device`|The default Spotify Connect device provided when setting up the script or `none`
    if no device is provided.|

    |`shuffle`|Whether or not to turn on the shuffle setting on the player that handles the request.
    It will be set based on whether or not the request mentions wanting to shuffle the music.
    The value will either be true or false.|'
  domain: script
  author: Charghoul & Jan Eisenbarth
  homeassistant:
    min_version: 2024.6.0
  input:
    spotify_plus_settings:
      name: Settings for SpotifyPlus playback
      icon: mdi:spotify
      description: You can use these settings to configure how SpotifyPlus playback
        is handled.
      input:
        default_entity:
          name: Default SpotifyPlus Entity
          description: 'The SpotifyPlus media player entity that will be used for all playback.
            This is required since the thlucas1 SpotifyPlus integration uses a single entity
            with multiple sources rather than multiple entities.'
          selector:
            entity:
              filter:
                domain:
                - media_player
              multiple: false
          default:
        default_device:
          name: Default Device
          description: 'The default Spotify Connect device which will be used if it
            is not clear from the request which device the music should play on.
            Leave empty if you do not want a default device.'
          selector:
            text:
          default:
        force_device_activation:
          name: Force Device Activation
          description: 'Force the device to reconnect to Spotify Connect before transferring playback.
            This is useful if devices sometimes appear as available but actually need to be re-activated.'
          selector:
            boolean:
          default: true
        device_transfer_delay:
          name: Device Transfer Delay
          description: 'Time delay (in seconds) to wait after transferring playback to a device.
            This gives Spotify time to process the change before attempting to play media.'
          selector:
            number:
              min: 0
              max: 10
              step: 0.1
              mode: slider
              unit_of_measurement: seconds
          default: 0.5
        search_limit:
          name: Search Limit
          description: 'The maximum number of search results to return when searching
            for tracks, artists, albums, playlists or shows.'
          selector:
            number:
              min: 1
              max: 50
              mode: slider
              step: 1
          default: 5
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description: You can use these settings to fine-tune the prompts for your specific
        LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        media_type_prompt:
          name: Media Type Prompt
          description: The prompt that the LLM will use to provide the media_type.
          selector:
            text:
              multiline: true
              multiple: false
          default: 'This argument is mandatory and must always be provided no matter
            what!

            "media_type" can only be one of 6 different values:

            - "track" if the search is about a specific track or a list of tracks.

            - "album" if the search is about an album or a list of albums.

            - "artist" if the search is about an artist.

            - "playlist" if the search specifically requests a playlist.

            - "podcast" if the search is about a podcast or show.

            - "radio" if the search is a radio channel or artist radio.

            media_type is mandatory and must always be provided. If a request does
            not match any of these types, for example when music from a specific genre
            is requested, then use "track" and provide a list of matching songs for
            the "media_id" parameter.'
        artist_prompt:
          name: Artist Prompt
          description: The prompt that the LLM will use to provide the artist.
          selector:
            text:
              multiline: true
              multiple: false
          default: '"artist" is the artist the user requests to play, or the artist
            of a specific track if the user mentions it while requesting to play a
            specific song. If the artist is unknown or there are multiple artists
            requested, use an empty string.'
        track_prompt:
          name: Track Prompt
          description: The prompt that the LLM will use to provide the track.
          selector:
            text:
              multiline: true
              multiple: false
          default: '"track" is the specific song or track the user wants to play.
            If the user requests a specific song, provide the song title here.
            If the track is unknown or there are multiple tracks requested, 
            use an empty string.'
        media_id_prompt:
          name: Media ID Prompt
          description: The prompt that the LLM will use to provide the media_id.
          selector:
            text:
              multiline: true
              multiple: false
          default: 'This argument is mandatory and must always be provided no matter
            what!

            media_id is the identifier for the media to be played. It can be either a search term
            or a Spotify URI/ID. For example:

            - If media_type is "track": Then media_id is the track name or a Spotify track URI 
              (e.g., "spotify:track:4cOdK2wGLETKBW3PvgPWqT")

            - If media_type is "album": Then media_id is the album name or a Spotify album URI
              (e.g., "spotify:album:0sNOF9WDwhWunNAHPD3Baj")

            - If media_type is "artist": Then media_id is the artist name or a Spotify artist URI
              (e.g., "spotify:artist:0TnOYISbd1XYRBk9myaseg")

            - If media_type is "playlist": Then media_id is the playlist name or a Spotify playlist URI
              (e.g., "spotify:playlist:37i9dQZEVXcIroVdJc5khI")

            - If media_type is "podcast": Then media_id is the podcast/show name or a Spotify show URI
              (e.g., "spotify:show:2Shpxw7dPoxRJCdfFXTWLE")

            - If media_type is "radio": Then media_id is the artist name followed by "Radio" or 
              a Spotify artist URI (e.g., "spotify:artist:0TnOYISbd1XYRBk9myaseg")

            This is a mandatory argument and must always be provided.'
        media_description_prompt:
          name: Media Description Prompt
          description: The prompt that the LLM will use to provide the media description.
          selector:
            text:
              multiline: true
              multiple: false
          default: The "media_description" key is used to describe the media which
            will be played. This can be taken from the voice command query, but it
            should be only the part which is relevant for the media. So if the voice
            request is "Play the best Queen songs on the living room player" the value
            for "media_description" should be "the best Queen songs"
        area_prompt:
          name: Area Prompt
          description: The prompt that the LLM will use to provide the area.
          selector:
            text:
              multiline: true
              multiple: false
          default: 'The area or areas for which the music is requested. If the request
            does not mention a target (either an area or a device), use the area the
            request comes from.

            If the area can not be determined from the request, or the device the
            request comes from, do not use this parameter.

            Only use both the "area" parameter and the "device_name" parameter together
            if both are specifically used in the request.'
        device_name_prompt:
          name: Device Name Prompt
          description: The prompt that the LLM will use to provide the device name.
          selector:
            text:
              multiline: true
              multiple: false
          default: 'Only use "device_name" if the request specifically mentions a
            Spotify Connect device on which to play the music. This could be a device name
            like "Living Room Speaker" or "Kitchen Echo".

            Only use both the "area" parameter and the "device_name" parameter together
            if both are specifically used in the request.'
        shuffle_prompt:
          name: Shuffle Prompt
          description: The prompt that the LLM will use to determine whether to turn on shuffle or not.
          selector:
            text:
              multiline: true
              multiple: false
          default: 'This argument is mandatory and must always be provided no matter
            what!
            
            If the request mentions shuffling the music, then the "shuffle" is set to true. 
            Otherwise, "shuffle" is set to false.
            
            For example, if the request is "Shuffle music by Muse", then "shuffle" should be set to true.
            
            If the request is "Play music by Billy Talent", "shuffle" would be false 
            since the request did not mention or request to shuffle.

            If the request is "Shuffle the playlist Liked Songs", then "shuffle" should be set to true.

            If the request is "Play the artist Guns and Roses", "shuffle" should be set to false, since the request 
            does not mention or request to shuffle.
            '
    addition_conditions_actions:
      name: Additional actions
      icon: mdi:wrench
      description: You can add additional actions to be performed after the Spotify play
        media action is started. Variables which can always be used
        are media_id, media_type, track, artist. Based on the request, the variables
        area and device_name can also be available.
      collapsed: true
      input:
        actions:
          name: Additional actions
          selector:
            action: {}
          default: []
mode: parallel
max_exceeded: silent
description: This script is used to play music from Spotify based on a voice request. Use the parameters
  as described in the description of each parameter.
fields:
  media_type:
    selector:
      select:
        options:
        - track
        - album
        - artist
        - playlist
        - podcast
        - radio
    name: Media Type
    description: !input media_type_prompt
    required: true
  artist:
    selector:
      text:
    name: Artist
    description: !input artist_prompt
    required: true
  track:
    selector:
      text:
    name: Track
    description: !input track_prompt
    required: true
  media_id:
    selector:
      text:
    name: Media ID
    description: !input media_id_prompt
    required: true
  media_description:
    selector:
      text:
    name: Media Description
    description: !input media_description_prompt
    required: true
  area:
    selector:
      area:
        multiple: true
    name: Area
    description: !input area_prompt
  device_name:
    selector:
      text:
    name: Device Name
    description: !input device_name_prompt
  shuffle:
    selector:
      boolean:
    name: Shuffle
    description: !input shuffle_prompt
sequence:
- variables:
    version: 20250626
    default_entity: !input default_entity
    default_device: !input default_device
    force_device_activation: !input force_device_activation
    device_transfer_delay: !input device_transfer_delay
    search_limit: !input search_limit
    shuffle: '{{ shuffle }}'
    target_device: '{{ device_name | default(default_device, true) }}'
    invalid_target:
      response: Unable to find valid target
- if:
  - condition: template
    value_template: '{{ not default_entity }}'
  then:
  - stop: No valid SpotifyPlus entity specified for Voice script
    response_variable: invalid_target
# Get list of available Spotify Connect devices
- alias: Get available Spotify Connect devices
  action: spotifyplus.get_player_devices
  data:
    entity_id: '{{ default_entity }}'
    refresh: true
    sort_result: true
  response_variable: available_devices
- choose:
  # Search for tracks when necessary
  - conditions:
    - condition: template
      value_template: '{{ media_type == "track" and not media_id.startswith("spotify:") }}'
    sequence:
    - action: spotifyplus.search_tracks
      data:
        entity_id: '{{ default_entity }}'
        criteria: '{{ (artist + " " if artist else "") + track if track else media_id }}'
        limit: '{{ search_limit }}'
      response_variable: track_search_results
    - variables:
        media_id: '{{ track_search_results.result.items[0].id if track_search_results.result.items | length > 0 else media_id }}'
        media_type_uri: track
  # Search for artists when necessary
  - conditions:
    - condition: template
      value_template: '{{ media_type == "artist" and not media_id.startswith("spotify:") }}'
    sequence:
    - action: spotifyplus.search_artists
      data:
        entity_id: '{{ default_entity }}'
        criteria: '{{ artist if artist else media_id }}'
        limit: '{{ search_limit }}'
      response_variable: artist_search_results
    - variables:
        media_id: '{{ artist_search_results.result.items[0].id if artist_search_results.result.items | length > 0 else media_id }}'
        media_type_uri: artist
  # Search for albums when necessary
  - conditions:
    - condition: template
      value_template: '{{ media_type == "album" and not media_id.startswith("spotify:") }}'
    sequence:
    - action: spotifyplus.search_albums
      data:
        entity_id: '{{ default_entity }}'
        criteria: '{{ (artist + " " if artist else "") + media_id }}'
        limit: '{{ search_limit }}'
      response_variable: album_search_results
    - variables:
        media_id: '{{ album_search_results.result.items[0].id if album_search_results.result.items | length > 0 else media_id }}'
        media_type_uri: album
  # Search for playlists when necessary
  - conditions:
    - condition: template
      value_template: '{{ media_type == "playlist" and not media_id.startswith("spotify:") }}'
    sequence:
    - action: spotifyplus.search_playlists
      data:
        entity_id: '{{ default_entity }}'
        criteria: '{{ media_id }}'
        limit: '{{ search_limit }}'
      response_variable: playlist_search_results
    - variables:
        media_id: '{{ playlist_search_results.result.items[0].id if playlist_search_results.result.items | length > 0 else media_id }}'
        media_type_uri: playlist
  # Search for podcasts when necessary
  - conditions:
    - condition: template
      value_template: '{{ media_type == "podcast" and not media_id.startswith("spotify:") }}'
    sequence:
    - action: spotifyplus.search_shows
      data:
        entity_id: '{{ default_entity }}'
        criteria: '{{ media_id }}'
        limit: '{{ search_limit }}'
      response_variable: podcast_search_results
    - variables:
        media_id: '{{ podcast_search_results.result.items[0].id if podcast_search_results.result.items | length > 0 else media_id }}'
        media_type_uri: show
  # Search for radio
  - conditions:
    - condition: template
      value_template: '{{ media_type == "radio" and not media_id.startswith("spotify:") }}'
    sequence:
    - action: spotifyplus.search_artists
      data:
        entity_id: '{{ default_entity }}'
        criteria: '{{ artist if artist else media_id | replace(" Radio", "") }}'
        limit: '{{ search_limit }}'
      response_variable: radio_search_results
    - variables:
        media_id: '{{ radio_search_results.result.items[0].id if radio_search_results.result.items | length > 0 else media_id }}'
        media_type_uri: artist
  default:
  - variables:
      media_type_uri: '{{ media_type }}'
# Prepare the final media ID/URI format
- if:
  - condition: template
    value_template: '{{ media_id.startswith("spotify:") }}'
  then:
  - variables:
      final_media_id: '{{ media_id }}'
      final_media_type: '{{ media_type_uri if media_type_uri is defined else media_type }}'
  else:
  - variables:
      final_media_id: '{{ "spotify:" + media_type_uri + ":" + media_id if media_id else media_id }}'
      final_media_type: '{{ media_type }}'
# Determine target device based on the request or defaults
- variables:
    matched_device_info: >-
      {% set ns = namespace(device_id=none, device_name=none) %}
      {% if target_device %}
        {% for device in available_devices.result.devices %}
          {% if device.name | lower == target_device | lower %}
            {% set ns.device_id = device.id %}
            {% set ns.device_name = device.name %}
          {% endif %}
        {% endfor %}
      {% endif %}
      {
        "id": {{ ns.device_id | tojson }},
        "name": {{ ns.device_name | tojson }}
      }
# Handle device transfer if needed
- choose:
  - conditions:
    - condition: template
      value_template: '{{ matched_device_info.id is not none }}'
    sequence:
    - alias: Transfer playback to requested device
      action: spotifyplus.player_transfer_playback
      data:
        entity_id: '{{ default_entity }}'
        device_id: '{{ matched_device_info.id }}'
        play: true
        force_activate_device: '{{ force_device_activation }}'
        delay: '{{ device_transfer_delay }}'
  default: []
# Set shuffle mode
- alias: Set shuffle mode
  action: spotifyplus.player_set_shuffle_mode
  data:
    state: '{{ shuffle }}'
    entity_id: '{{ default_entity }}'
    delay: 1
  continue_on_error: true
# Play the requested media
- alias: Play requested content
  choose:
  - conditions:
    - condition: template
      value_template: '{{ final_media_type == "track" }}'
    sequence:
    - action: spotifyplus.player_media_play_tracks
      data:
        entity_id: '{{ default_entity }}'
        uris: '{{ final_media_id }}'
        device_id: '{{ matched_device_info.id if matched_device_info.id is not none else "*" }}'
  - conditions:
    - condition: template
      value_template: '{{ final_media_type == "playlist" or final_media_type == "album" or final_media_type == "artist" or final_media_type == "show" }}'
    sequence:
    - action: spotifyplus.player_media_play_context
      data:
        entity_id: '{{ default_entity }}'
        context_uri: '{{ final_media_id }}'
        device_id: '{{ matched_device_info.id if matched_device_info.id is not none else "*" }}'
  # Default fallback to standard media_player
  default:
  - action: media_player.play_media
    target:
      entity_id: '{{ default_entity }}'
    data:
      media_content_id: '{{ final_media_id }}'
      media_content_type: '{{ final_media_type }}'
- sequence: !input actions 
